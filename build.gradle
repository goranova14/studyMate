plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id "org.sonarqube" version "3.5.0.2730"
    id "org.flywaydb.flyway" version "6.4.3"
    id 'jacoco'
//    id "io.sentry.jvm.gradle" version "3.10.0"

}

//sentry {
//    // Generates a JVM (Java, Kotlin, etc.) source bundle and uploads your source code to Sentry.
//    // This enables source context, allowing you to see your source
//    // code as part of your stack traces in Sentry.
//    includeSourceContext = true
//
//    org = "dg-r1"
//    projectName = "java-spring-boot"
//    authToken = "E91E158E4C6656F68B1B5D1C316766DE98D2AD6EF3BFB44F78E9CFCDF5"
//}
sonar {

    properties {
        property "sonar.login", "admin"
        property "sonar.password", "0882704459dD"
        property "sonar.projectKey", "StudyMate"
        property "sonar.qualitygate.wait", true
        property "sonar.exclusions", "**/configuration/**/*"

    }

}

group = 'nl.fontys.s3.StudySmate'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
 }


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.jetbrains:annotations:23.0.0'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    compileOnly 'org.projectlombok:lombok'

//    implementation 'io.sentry:sentry-spring-boot-starter-jakarta:6.22.0'
//    implementation 'io.sentry:sentry-logback:6.22.0'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    dependencies { testImplementation "org.mockito:mockito-core:3.+" }
    testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'
    implementation 'mysql:mysql-connector-java:8.0.28'
    implementation 'com.microsoft.sqlserver:mssql-jdbc:9.4.1.jre8'
	testImplementation 'org.apache.httpcomponents.client5:httpclient5'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.0.2'
    implementation 'org.springframework.security:spring-security-core:6.0.2'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.webjars:webjars-locator-core'
    implementation 'org.webjars:sockjs-client:1.0.2'
    implementation 'org.webjars:stomp-websocket:2.3.3'
    implementation 'org.webjars:bootstrap:3.3.7'
    implementation 'org.webjars:jquery:3.1.1-1'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'com.cloudinary:cloudinary-http44:1.31.0'

}

jacoco {
    toolVersion = "0.8.7"
}
jacocoTestReport {
    println "Included directories: ${classDirectories.files.collect { it.absolutePath }.join(', ')}"
    reports {
        xml.required = true
    }
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/baeldung//ExcludedPOJO.class",
                    "com/baeldung//DTO.",
                    "**/config/*",
                    "nl/fontys/s3/studysmate/studymate/configuration/**"
            ])
        }))
    }
}


tasks.named('sonar').configure {
    dependsOn jacocoTestReport
}

tasks.named('test') {
    useJUnitPlatform()
}
